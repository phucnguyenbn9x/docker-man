; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "DockerMan"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "I2G"
#define MyAppURL "http://www.i2g.com/"
#define MyAppExeName "docker-man.exe"

#define UserFolder "{userappdata}\..\.."

#define DockerManPath "D:\well-insight\docker-man\native-app\docker-man-win32-x64\*"
#define Docker "Docker for Windows Installer.exe"
#define DockerPath "D:\well-insight\docker-man\native-app\prerequisites\Docker for Windows Installer.exe"
#define DaemonJsonPath "D:\well-insight\docker-man\native-app\prerequisites\daemon.json"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1A301766-DB80-467F-9518-89AD5C8CFD9A}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=D:\well-insight\docker-man\native-app
OutputBaseFilename=DockerMan-Setup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#DockerManPath}"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#DockerPath}"; DestDir: "{app}"; Check: InstallDockerConfirm; Flags: ignoreversion; AfterInstall: InstallDocker
Source: "{#DaemonJsonPath}"; DestDir: "{#UserFolder}\.docker"; Check: getCheckInstallDocker; Flags: ignoreversion;
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
var checkInstallDocker: Boolean;

procedure InstallDocker;
var
  ResultCode: Integer;
begin
  if not Exec(ExpandConstant('{app}\{#Docker}'), '', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode) then begin
    MsgBox('Can not install Docker', mbError, MB_OK);
  end;
end;

function InitializeSetup(): Boolean;
begin
  if RegKeyExists(HKEY_LOCAL_MACHINE_64, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Docker for Windows') then begin
  {if RegKeyExists(HKEY_LOCAL_MACHINE_64, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\1') then begin}
    checkInstallDocker := False;
  end else begin
    checkInstallDocker := True;
  end;
  Result := True;
end;

function NeedRestart(): Boolean;
begin
  if checkInstallDocker then begin
    Result := True;
  end else begin
    Result := False;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssDone then begin
    if checkInstallDocker then begin
      DeleteFile(ExpandConstant('{app}\{#Docker}'));
    end;
  end;
end;

var
  dockerChecked: Boolean;
function InstallDockerConfirm(): Boolean;
begin
  if not dockerChecked and checkInstallDocker then begin
    checkInstallDocker := MsgBox('Can not find Docker Desktop!' + #13#10 + #13#10 + 'Install it now?', mbConfirmation, MB_YESNO) = idYes;
    dockerChecked := True;
  end;
  Result := checkInstallDocker;
end;

function getCheckInstallDocker(): Boolean;
begin
  Result := checkInstallDocker;
end;

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

