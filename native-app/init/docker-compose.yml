version: "3.3"
services:
  wi_mysql:
    container_name: wi_mysql
    image: ${REGISTRY_URL}/mysql:5.7
    restart: always
    command: --init-file /data/application/init.sql
    environment:
      MYSQL_PASSWORD: "qwertyuiop"
      MYSQL_ROOT_PASSWORD: "qwertyuiop"
    ports:
      - "30336:3306"
    expose:
      - "3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      - .\initdb\init.sql:/data/application/init.sql
      - ${STORAGE}\docker-local\mysql:/var/lib/mysql
    networks:
      - i2g
  wi_mongo:
    container_name: wi_mongo
    image: ${REGISTRY_URL}/mongo:latest
    restart: always
    # ports:
    #   - "32017:27017"
    expose:
      - "27017"
    # volumes:
    #   - ${STORAGE}\docker-local\mongo:/data/db
    networks:
      - i2g
  wi_redis:
    container_name: wi_redis
    image: ${REGISTRY_URL}/redis:latest
    restart: always
    # ports:
    #   - "30379:6379"
    expose:
      - "6379"
    networks:
      - i2g
  wi_mqtt:
    container_name: wi_mqtt
    image: ${REGISTRY_URL}/eclipse-mosquitto:latest
    restart: always
    ports:
      - "30883:1883"
      - "30901:9001"
    expose:
      - "1883"
      - "9001"
    volumes:
      - .\mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - i2g
  wi_csv_transformer:
    container_name: wi_csv_transformer
    image: ${REGISTRY_URL}/wi-csv-transform:${I2G_VERSION}
    restart: always
    # ports:
    #   - "3005:8000"
    expose:
      - "8000"
    networks:
      - i2g 
  wi_auth:
    container_name: wi_auth
    image: ${REGISTRY_URL}/wi-authenticate:${I2G_VERSION}
    restart: always
    depends_on:
      - wi_mysql
    environment:
      AUTH_PORT: "2999"
      AUTH_DBNAME: "wi_auth"
      AUTH_DBUSER: "i2g"
      AUTH_DBPASSWORD: "qwertyuiop"
      AUTH_DBHOST: wi_mysql
      AUTH_DBDIALECT: "mysql"
      AUTH_DBPORT: "3306"
      AUTH_DBSTORAGE: "/tmp/wi_backend.sqlite"
    ports:
      - "30000:2999"
    expose:
      - "2999"
    networks:
      - i2g
  wi_online_inventory:
    container_name: wi_online_inventory
    image: ${REGISTRY_URL}/wi-inventory:${I2G_VERSION}
    restart: always
    depends_on:
      - wi_mysql
    environment:
      INVENTORY_PORT: "9000"
      INVENTORY_DBNAME: "inventory"
      INVENTORY_DBUSER: "i2g"
      INVENTORY_DBPASSWORD: "qwertyuiop"
      INVENTORY_DBHOST: wi_mysql
      INVENTORY_DIALECT: "mysql"
      INVENTORY_DBPORT: "3306"
      INVENTORY_DATAPATH: "/app/data/curve"
      INVENTORY_EXPORTPATH: "/app/data/export"
      INVENTORY_MQTT_BROKER: "mqtt://wi_matt:1883"
      INVENTORY_JWTKET: "secretKey"
    ports:
      - "30003:9000"
    expose:
      - "3002"
    networks:
      - i2g
    volumes:
      - ${STORAGE}\docker-local\wi-inventory\data\curve:/app/data/curve
      - ${STORAGE}\docker-local\wi-inventory\data\export:/app/data/export
      - ${STORAGE}\docker-local\wi-inventory\data\uploads:/app/uploads
  wi_backend:
    container_name: wi_backend
    image: ${REGISTRY_URL}/wi-backend:${I2G_VERSION}
    restart: always
    depends_on:
      - wi_mysql
      - wi_redis
      - wi_mqtt
    environment:
      BACKEND_PORT: "3000"
      BACKEND_DBNAME: "wi_backend"
      BACKEND_DBUSER: "i2g"
      BACKEND_DBPASSWORD: "qwertyuiop"
      BACKEND_DBHOST: wi_mysql
      BACKEND_DBDIALECT: "mysql"
      BACKEND_DBPORT: "3306"
      BACKEND_DBPREFIX: "wi1004_"
      BACKEND_DBSTORAGE: "/tmp/wi_backend.sqlite"
      BACKEND_REDIS_HOST: wi_redis
      BACKEND_REDIS_PORT: "6379"
      BACKEND_AUTH_SERVICE: "http://wi_auth:2999"
      BACKEND_INV_SERVICE: "http://wi_online_inventory:9000"
      BACKEND_CSV_SERVICE: "http://wi_csv_transformer:8000"
      BACKEND_MQTT_BROKER: "mqtt://wi_mqtt:1883"
      BACKEND_CURVE_BASE_PATH: "/app/data/curve"
      BACKEND_IMAGE_BASE_PATH: "/app/data/image"
      BACKEND_EXPORT_PATH: "/app/data/export"
      BACKEND_USER_LOG_PATH: "/app/data/user-log"
      BACKEND_USER_UPLOAD_PATH: "/app/data/uploads"
      THUMBNAIL_SERVICE: "http://wi_imgproxy:8080"
      PUBLIC_ADDRESS: "http://wi_backend:3000"
      BACKEND_JWTKEY: "secretKey"
      SALT: "wi-hash"
      VALIDATION_REQUEST_STATUS: "false"
    ports:
      - "30001:3000"
    expose:
      - "3000"
    networks:
      - i2g
    volumes:
      - ${STORAGE}\docker-local\wi-backend\curve:/app/data/curve
      - ${STORAGE}\docker-local\wi-backend\image:/app/data/image
      - ${STORAGE}\docker-local\wi-backend\export:/app/data/export
      - ${STORAGE}\docker-local\wi-backend\user-log:/app/data/user-log
      - ${STORAGE}\docker-local\wi-backend\uploads:/app/data/uploads

  wi_python_backend:
    container_name: wi_python_backend
    image: ${REGISTRY_URL}/wi-python-production:${I2G_VERSION}
    restart: always
    environment:
      PYTHON_PORT: "3000"
      PYTHON_ENV: "local"
      USER_RELATED_ROOT_URL: "http://wi_auth:2999"
      PROJECT_RELATED_ROOT_URL: "http://wi_backend:3000"
      PYTHON_DOWNLOAD_BASE_URL: "http://localhost:30002"
      PYTHON_CLIENT_DOMAIN: "http://localhost:9091"
      PYTHON_PROJECT_STORAGE: "/app/storage"
      PYTHON_LOG_PATH: "/app/logs"
      PYTHON_EXPORT_PATH: "/app/export"
      SALT: "wi-hash"
      PYTHON_JWTKEY: "secretKey"
    ports:
      - "30002:3000"
    expose:
      - "3003"
    networks:
      - i2g
    volumes:
      - ${STORAGE}\docker-local\wi-python-backend\storage:/app/storage
      - ${STORAGE}\docker-local\wi-python-backend\logs:/app/logs
      - ${STORAGE}\docker-local\wi-python-backend\export:/app/export
  wi_angular:
    container_name: wi_angular
    image: ${REGISTRY_URL}/wi-angular:${I2G_VERSION}
    restart: always
    # environment:
    #   NODE_ENV: "local"
    #   BASE_URL: "http://wi_proxy:3033/backend"
    #   AUTHENTICATION_SERVICE: "http://wi_proxy:3033/auth"
    ports:
      - "9090:80"
    networks:
      - i2g
  wi_python_frontend:
    container_name: wi_python_frontend
    image: ${REGISTRY_URL}/wi-python-frontend:${I2G_VERSION}
    restart: always
    environment:
      NODE_ENV: "local"
    ports:
      - "9091:80"
    networks:
      - i2g
  wi_base_map:
    container_name: wi_base_map
    image: ${REGISTRY_URL}/base-map:${I2G_VERSION}
    restart: always
    environment:
      NODE_ENV: "local"
    ports:
      - "9092:80"
    networks:
      - i2g
  wi_pm:
    container_name: wi_pm
    image: ${REGISTRY_URL}/wipm:${I2G_VERSION}
    restart: always
    depends_on:
      - wi_mongo
    environment:
      MONGO_HOST: wi_mongo
      MONGO_PORT: "27017"
    volumes:
      - ${STORAGE}\docker-local\wi-pm:/app/files
    ports:
      - "30005:5000"
      - "30055:5555"
    networks:
      - i2g
  wi_proxy:
    container_name: wi_proxy
    image: ${REGISTRY_URL}/wi-proxy:${I2G_VERSION}
    restart: always
    environment:
      WI_AUTH_LOCAL: "http://wi_auth:2999"
      WI_BACKEND_LOCAL: "http://wi_backend:3000"
      WI_AUTH_CLOUD: "https://users.i2g.cloud"
    ports:
      - "30033:3033"
    networks:
      - i2g
  wi_imgproxy:
    container_name: wi_imgproxy
    image: ${REGISTRY_URL}/wi-imgproxy:${I2G_VERSION}
    restart: always
    # ports:
    #   - "30088:8080"
    expose: 
      - "8080"
    networks:
      - i2g
networks:
  i2g:
    driver: bridge
